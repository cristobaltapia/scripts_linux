#!/usr/bin/env python3
import argparse
import sys

import bibtexparser
from bibtexparser.bparser import BibTexParser


def print_authors(au: str):
    authors = au.split("and")
    lastnames = []
    # Get lastname
    for ai in authors:
        if "," in ai:
             lastnames.append(ai.strip().split(",")[0])
        else:
             lastnames.append(ai.strip().split(" ")[-1])

    lastnames = [f"author:{ai}" for ai in lastnames]
    query = " OR ".join(lastnames)
    print(f"{query}")


def print_all(year, author, title, sub):
    au = "Author(s):"
    ti = "Title:"
    su = "Subtitle:"
    ye = "Year:"
    if sub is None:
        print(
            f" <tt><b>{au:<11}</b></tt> {author}\n"
            + f" <tt><b>{ti:<11}</b></tt> {title}\n"
            + f" <tt><b>{ye:<11}</b></tt> {year}\n"
            + "  "
        )
    else:
        print(
            f" <tt><b>{au:<11}</b></tt> {author}\n"
            + f" <tt><b>{ti:<11}</b></tt> {title}\n"
            + f" <tt><b>{su:<11}</b></tt> {sub}\n"
            + f" <tt><b>{ye:<11}</b></tt> {year}"
        )


if __name__ == "__main__":
    #  bib = sys.stdin.read()

    pars = argparse.ArgumentParser(description="Parse a bibfile")
    pars.add_argument(
        "bibfile",
        type=str,
        nargs="?",
        help="Bibfile to be parsed",
        default=sys.stdin.read(),
    )
    pars.add_argument(
        "--author",
        help="Return author corresponding to bibkey",
        action="store_const",
        const=True,
        default=False,
    )
    pars.add_argument(
        "--all",
        help="Return relevant fields",
        action="store_const",
        const=True,
        default=False,
    )

    argumetns = pars.parse_args()
    bib = argumetns.bibfile

    parser = BibTexParser()
    parser.ignore_nonstandard_types = True

    bib_db = bibtexparser.loads(bib, parser)

    # Get the relevant information
    title = bib_db.entries[0]["title"]
    author = bib_db.entries[0]["author"]
    year = bib_db.entries[0]["year"]
    key = bib_db.entries[0]["ID"]
    # Check whether ther is a subtitle
    if "subtitle" in bib_db.entries[0]:
        sub = bib_db.entries[0]["subtitle"]
    else:
        sub = None

    if argumetns.all:
        print_all(year, author, title, sub)
    elif argumetns.author:
        print_authors(author)

